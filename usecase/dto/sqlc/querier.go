// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"context"
)

type Querier interface {
	CreateArticle(ctx context.Context, arg *CreateArticleParams) (CreateArticleRow, error)
	// comment.sql
	CreateComment(ctx context.Context, arg *CreateCommentParams) (CreateCommentRow, error)
	CreateUser(ctx context.Context, arg *CreateUserParams) (User, error)
	DeleteArticle(ctx context.Context, arg *DeleteArticleParams) error
	DeleteComment(ctx context.Context, arg *DeleteCommentParams) error
	// filename: queries/articles.sql
	// Insert favorite and update article, then return article details along with author information and tags
	FavoriteArticle(ctx context.Context, arg *FavoriteArticleParams) (FavoriteArticleRow, error)
	FeedArticles(ctx context.Context, arg *FeedArticlesParams) ([]FeedArticlesRow, error)
	FollowUser(ctx context.Context, arg *FollowUserParams) (FollowUserRow, error)
	// article.sql
	GetArticle(ctx context.Context, arg *GetArticleParams) (GetArticleRow, error)
	GetCommentsByArticleSlug(ctx context.Context, slug string) ([]GetCommentsByArticleSlugRow, error)
	GetSingleComment(ctx context.Context) (GetSingleCommentRow, error)
	GetTags(ctx context.Context) ([]string, error)
	// user.sql
	GetUser(ctx context.Context, id int64) (GetUserRow, error)
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserProfile(ctx context.Context, arg *GetUserProfileParams) (GetUserProfileRow, error)
	GetUserProfileById(ctx context.Context, arg *GetUserProfileByIdParams) (GetUserProfileByIdRow, error)
	ListArticles(ctx context.Context, arg *ListArticlesParams) ([]ListArticlesRow, error)
	UnfavoriteArticle(ctx context.Context, arg *UnfavoriteArticleParams) (UnfavoriteArticleRow, error)
	UnfollowUser(ctx context.Context, arg *UnfollowUserParams) (UnfollowUserRow, error)
	UpdateArticle(ctx context.Context, arg *UpdateArticleParams) (UpdateArticleRow, error)
	UpdateUser(ctx context.Context, arg *UpdateUserParams) (UpdateUserRow, error)
}

var _ Querier = (*Queries)(nil)
