// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, password) VALUES ($1, $2, $3)
RETURNING id
`

type CreateUserParams struct {
	Email    string
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Username, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one

SELECT id, email, username, password, bio, image FROM users WHERE id = $1
`

// user.sql
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password, bio, image FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = CASE WHEN $2::text IS NOT NULL AND $2::text <> '' THEN $2::text ELSE email END,
    username = CASE WHEN $3::text IS NOT NULL AND $3::text <> '' THEN $3::text ELSE username END,
    password = CASE WHEN $4::text IS NOT NULL AND $4::text <> '' THEN $4::text ELSE password END,
    image = CASE WHEN $5::text IS NOT NULL AND $5::text <> '' THEN $5::text ELSE image END,
    bio = CASE WHEN $6::text IS NOT NULL AND $6::text <> '' THEN $6::text ELSE bio END
WHERE
    id = $1
RETURNING id, email, username, password, bio, image
`

type UpdateUserParams struct {
	ID       int64
	Email    string
	Username string
	Password string
	Image    string
	Bio      string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.Image,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Bio,
		&i.Image,
	)
	return i, err
}
