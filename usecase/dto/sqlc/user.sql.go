// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, password)
VALUES ($1, $2, $3)
RETURNING id, email, username, password, bio, image
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const followUser = `-- name: FollowUser :one
WITH followee AS (
    SELECT id, username, bio, image FROM users WHERE username = $1
),
     insert_follow AS (
         INSERT INTO follows (follower_id, followee_id)
             SELECT $2, id FROM followee
             RETURNING followee_id
     )
SELECT
    f.username,
    f.bio,
    f.image,
    TRUE AS following
FROM followee f
WHERE f.id = (SELECT followee_id FROM insert_follow)
`

type FollowUserParams struct {
	Username   string `json:"username"`
	FollowerID int64  `json:"followerId"`
}

type FollowUserRow struct {
	Username  string      `json:"username"`
	Bio       pgtype.Text `json:"bio"`
	Image     pgtype.Text `json:"image"`
	Following bool        `json:"following"`
}

func (q *Queries) FollowUser(ctx context.Context, arg *FollowUserParams) (FollowUserRow, error) {
	row := q.db.QueryRow(ctx, followUser, arg.Username, arg.FollowerID)
	var i FollowUserRow
	err := row.Scan(
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Following,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT email, bio, image, username
FROM users
WHERE id = $1
`

type GetUserRow struct {
	Email    string      `json:"email"`
	Bio      pgtype.Text `json:"bio"`
	Image    pgtype.Text `json:"image"`
	Username string      `json:"username"`
}

// user.sql
func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.Email,
		&i.Bio,
		&i.Image,
		&i.Username,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password, bio, image
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
WITH profile_data AS (
    SELECT
        u.username,
        u.bio,
        u.image,
        CASE
            WHEN f.follower_id IS NOT NULL THEN true
            ELSE false
            END AS following
    FROM users u
             LEFT JOIN follows f ON u.id = f.followee_id AND f.follower_id = $2
    WHERE u.username = $1
)
SELECT
    username,
    bio,
    image,
    COALESCE(following, false) AS following
FROM profile_data
`

type GetUserProfileParams struct {
	Username   string      `json:"username"`
	FollowerID pgtype.Int8 `json:"followerId"`
}

type GetUserProfileRow struct {
	Username  string      `json:"username"`
	Bio       pgtype.Text `json:"bio"`
	Image     pgtype.Text `json:"image"`
	Following bool        `json:"following"`
}

func (q *Queries) GetUserProfile(ctx context.Context, arg *GetUserProfileParams) (GetUserProfileRow, error) {
	row := q.db.QueryRow(ctx, getUserProfile, arg.Username, arg.FollowerID)
	var i GetUserProfileRow
	err := row.Scan(
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Following,
	)
	return i, err
}

const getUserProfileById = `-- name: GetUserProfileById :one
WITH profile_data AS (
    SELECT
        u.username,
        u.bio,
        u.image,
        CASE
            WHEN f.follower_id IS NOT NULL THEN true
            ELSE false
            END AS following
    FROM users u
             LEFT JOIN follows f ON u.id = f.followee_id AND f.follower_id = $2
    WHERE u.id = $1
)
SELECT
    username,
    bio,
    image,
    COALESCE(following, false) AS following
FROM profile_data
`

type GetUserProfileByIdParams struct {
	ID         int64 `json:"id"`
	FollowerID int64 `json:"followerId"`
}

type GetUserProfileByIdRow struct {
	Username  string      `json:"username"`
	Bio       pgtype.Text `json:"bio"`
	Image     pgtype.Text `json:"image"`
	Following bool        `json:"following"`
}

func (q *Queries) GetUserProfileById(ctx context.Context, arg *GetUserProfileByIdParams) (GetUserProfileByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserProfileById, arg.ID, arg.FollowerID)
	var i GetUserProfileByIdRow
	err := row.Scan(
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Following,
	)
	return i, err
}

const unfollowUser = `-- name: UnfollowUser :one
WITH followee AS (
    SELECT id, username, bio, image FROM users WHERE username = $1
),
     deleted_follow AS (
         DELETE FROM follows
             WHERE follower_id = $2 AND followee_id = (SELECT id FROM followee)
             RETURNING followee_id
     )
SELECT
    f.username,
    f.bio,
    f.image,
    FALSE AS following
FROM followee f
WHERE f.id = (SELECT followee_id FROM deleted_follow)
`

type UnfollowUserParams struct {
	Username   string `json:"username"`
	FollowerID int64  `json:"followerId"`
}

type UnfollowUserRow struct {
	Username  string      `json:"username"`
	Bio       pgtype.Text `json:"bio"`
	Image     pgtype.Text `json:"image"`
	Following bool        `json:"following"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg *UnfollowUserParams) (UnfollowUserRow, error) {
	row := q.db.QueryRow(ctx, unfollowUser, arg.Username, arg.FollowerID)
	var i UnfollowUserRow
	err := row.Scan(
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Following,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email    = CASE WHEN $2::text IS NOT NULL AND $2::text <> '' THEN $2::text ELSE email END,
    username = CASE WHEN $3::text IS NOT NULL AND $3::text <> '' THEN $3::text ELSE username END,
    password = CASE WHEN $4::text IS NOT NULL AND $4::text <> '' THEN $4::text ELSE password END,
    image    = CASE WHEN $5::text IS NOT NULL AND $5::text <> '' THEN $5::text ELSE image END,
    bio      = CASE WHEN $6::text IS NOT NULL AND $6::text <> '' THEN $6::text ELSE bio END
WHERE id = $1
RETURNING email, bio, image, username
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
	Password string `json:"password"`
	Image    string `json:"image"`
	Bio      string `json:"bio"`
}

type UpdateUserRow struct {
	Email    string      `json:"email"`
	Bio      pgtype.Text `json:"bio"`
	Image    pgtype.Text `json:"image"`
	Username string      `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.Image,
		arg.Bio,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.Email,
		&i.Bio,
		&i.Image,
		&i.Username,
	)
	return i, err
}
