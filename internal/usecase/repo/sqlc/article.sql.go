// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: article.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArticle = `-- name: CreateArticle :one
WITH inserted_article AS (
    INSERT INTO articles (slug, title, description, body, author_id)
        VALUES ($1, $2, $3, $4, $5)
        RETURNING id, slug, title, description, body, created_at, updated_at, favorites_count, author_id
),
     inserted_tags AS (
         INSERT INTO tags (tag)
             SELECT unnest($6::text[])
             ON CONFLICT (tag) DO NOTHING
             RETURNING id, tag
     ),
     all_tags AS (
         SELECT id, tag FROM inserted_tags
         UNION
         SELECT id, tag FROM tags WHERE tag = ANY($6)
     ),
     inserted_article_tags AS (
         INSERT INTO article_tags (article_id, tag_id)
             SELECT ia.id, t.id
             FROM inserted_article ia
                      CROSS JOIN all_tags t
             ON CONFLICT (article_id, tag_id) DO NOTHING
     )
SELECT
    ia.slug,
    ia.title,
    ia.description,
    ia.body,
    ia.created_at AS "createdAt",
    ia.updated_at AS "updatedAt",
    ia.favorites_count AS "favoritesCount",
    u.username,
    u.bio,
    u.image,
    array_agg(t.tag) AS tagList
FROM inserted_article ia
         JOIN users u ON ia.author_id = u.id
         LEFT JOIN article_tags at ON ia.id = at.article_id
         LEFT JOIN tags t ON at.tag_id = t.id
GROUP BY ia.id, ia.slug, ia.title, ia.description, ia.body, ia.created_at, ia.updated_at, ia.favorites_count, u.id, u.username, u.bio, u.image
`

type CreateArticleParams struct {
	Slug        string      `json:"slug"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	Body        string      `json:"body"`
	AuthorID    pgtype.Int8 `json:"authorId"`
	Tags        []string    `json:"tags"`
}

type CreateArticleRow struct {
	Slug           string           `json:"slug"`
	Title          string           `json:"title"`
	Description    string           `json:"description"`
	Body           string           `json:"body"`
	CreatedAt      pgtype.Timestamp `json:"createdAt"`
	UpdatedAt      pgtype.Timestamp `json:"updatedAt"`
	FavoritesCount int32            `json:"favoritesCount"`
	Username       string           `json:"username"`
	Bio            pgtype.Text      `json:"bio"`
	Image          pgtype.Text      `json:"image"`
	Taglist        interface{}      `json:"taglist"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg *CreateArticleParams) (CreateArticleRow, error) {
	row := q.db.QueryRow(ctx, createArticle,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.AuthorID,
		arg.Tags,
	)
	var i CreateArticleRow
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Taglist,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE
FROM articles
WHERE slug = $1
  and author_id = $2
`

type DeleteArticleParams struct {
	Slug     string      `json:"slug"`
	AuthorID pgtype.Int8 `json:"authorId"`
}

func (q *Queries) DeleteArticle(ctx context.Context, arg *DeleteArticleParams) error {
	_, err := q.db.Exec(ctx, deleteArticle, arg.Slug, arg.AuthorID)
	return err
}

const favoriteArticle = `-- name: FavoriteArticle :one

WITH article_id_cte AS (
    SELECT a.id, a.author_id
    FROM articles a
    WHERE a.slug = $1
),
     insert_favorite AS (
         INSERT INTO favorites (user_id, article_id)
             SELECT $2, a.id
             FROM article_id_cte a
             RETURNING article_id
     ),
     update_article AS (
         UPDATE articles
             SET favorites_count = favorites_count + 1
             WHERE id = (SELECT article_id FROM insert_favorite)
             RETURNING id, slug, title, description, body, created_at, updated_at, favorites_count, author_id
     ),
     taglist_cte AS (
         SELECT at.article_id, array_agg(t.tag) AS taglist
         FROM article_tags at
                  JOIN tags t ON at.tag_id = t.id
         WHERE at.article_id = (SELECT id FROM update_article)
         GROUP BY at.article_id
     )
SELECT
    ua.slug,
    ua.title,
    ua.description,
    ua.body,
    to_char(ua.created_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ') AS created_at,
    to_char(ua.updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ') AS updated_at,
    ua.favorites_count,
    u.username,
    u.bio,
    u.image,
    TRUE AS favorited,
    EXISTS (
        SELECT 1
        FROM follows f
        WHERE f.follower_id = $2
          AND f.followee_id = ua.author_id
    ) AS following,
    COALESCE(tl.taglist, '{}') AS taglist
FROM update_article ua
         JOIN users u ON ua.author_id = u.id
         LEFT JOIN taglist_cte tl ON ua.id = tl.article_id
`

type FavoriteArticleParams struct {
	Slug       string `json:"slug"`
	FollowerID int64  `json:"followerId"`
}

type FavoriteArticleRow struct {
	Slug           string      `json:"slug"`
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Body           string      `json:"body"`
	CreatedAt      string      `json:"createdAt"`
	UpdatedAt      string      `json:"updatedAt"`
	FavoritesCount int32       `json:"favoritesCount"`
	Username       string      `json:"username"`
	Bio            pgtype.Text `json:"bio"`
	Image          pgtype.Text `json:"image"`
	Favorited      bool        `json:"favorited"`
	Following      bool        `json:"following"`
	Taglist        interface{} `json:"taglist"`
}

// filename: queries/articles.sql
// Insert favorite and update article, then return article details along with author information and tags
func (q *Queries) FavoriteArticle(ctx context.Context, arg *FavoriteArticleParams) (FavoriteArticleRow, error) {
	row := q.db.QueryRow(ctx, favoriteArticle, arg.Slug, arg.FollowerID)
	var i FavoriteArticleRow
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Favorited,
		&i.Following,
		&i.Taglist,
	)
	return i, err
}

const feedArticles = `-- name: FeedArticles :many
WITH filtered_articles AS (SELECT a.id, a.slug, a.title, a.description, a.body, a.created_at, a.updated_at, a.favorites_count, a.author_id,
                                  u.username                   AS author_username,
                                  u.bio                        AS author_bio,
                                  u.image                      AS author_image,
                                  (CASE
                                       WHEN $3::int IS NULL THEN FALSE
                                       ELSE EXISTS (SELECT 1
                                                    FROM follows
                                                    WHERE follower_id = $3::int
                                                      AND followee_id = a.author_id)
                                      END)                     AS following,
                                  (SELECT ARRAY_AGG(t.tag)
                                   FROM tags t
                                            JOIN article_tags at ON t.id = at.tag_id
                                   WHERE at.article_id = a.id) AS tags,
                                  (CASE
                                       WHEN $3::int IS NULL THEN FALSE
                                       ELSE EXISTS (SELECT 1
                                                    FROM favorites
                                                    WHERE user_id = $3::int
                                                      AND article_id = a.id)
                                      END)                     AS favorited
                           FROM articles a
                                    LEFT JOIN users u ON a.author_id = u.id
                                    LEFT JOIN article_tags at ON a.id = at.article_id
                                    LEFT JOIN tags t ON at.tag_id = t.id
                                    LEFT JOIN favorites f ON a.id = f.article_id
                           GROUP BY a.id, u.username, u.bio, u.image, a.author_id)
SELECT fa.slug,
       fa.title,
       fa.description,
       fa.body,
       fa.tags                                               AS tag_list,
       to_char(fa.created_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ') AS created_at,
       to_char(fa.updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ') AS updated_at,
       fa.favorites_count,
       fa.favorited,
       fa.author_username                                    AS username,
       fa.author_bio                                         AS bio,
       fa.author_image                                       AS image,
       fa.following
FROM filtered_articles fa
ORDER BY fa.created_at DESC
LIMIT $2::int OFFSET $1::int
`

type FeedArticlesParams struct {
	Offsett int32       `json:"offsett"`
	Limitt  int32       `json:"limitt"`
	UserID  pgtype.Int4 `json:"userId"`
}

type FeedArticlesRow struct {
	Slug           string      `json:"slug"`
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Body           string      `json:"body"`
	TagList        interface{} `json:"tagList"`
	CreatedAt      string      `json:"createdAt"`
	UpdatedAt      string      `json:"updatedAt"`
	FavoritesCount int32       `json:"favoritesCount"`
	Favorited      interface{} `json:"favorited"`
	Username       pgtype.Text `json:"username"`
	Bio            pgtype.Text `json:"bio"`
	Image          pgtype.Text `json:"image"`
	Following      interface{} `json:"following"`
}

func (q *Queries) FeedArticles(ctx context.Context, arg *FeedArticlesParams) ([]FeedArticlesRow, error) {
	rows, err := q.db.Query(ctx, feedArticles, arg.Offsett, arg.Limitt, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FeedArticlesRow{}
	for rows.Next() {
		var i FeedArticlesRow
		if err := rows.Scan(
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Body,
			&i.TagList,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FavoritesCount,
			&i.Favorited,
			&i.Username,
			&i.Bio,
			&i.Image,
			&i.Following,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticle = `-- name: GetArticle :one

SELECT a.slug,
       a.title,
       a.description,
       a.body,
       a.created_at,
       a.updated_at,
       a.favorites_count,
       u.username                                                                                        AS username,
       u.bio                                                                                             AS bio,
       u.image                                                                                           AS image,
       ARRAY_AGG(t.tag)                                                                                  AS tag_list,
       (CASE WHEN EXISTS (SELECT 1 FROM favorites f WHERE f.article_id = a.id) THEN TRUE ELSE FALSE END) AS favorited,
       (CASE
            WHEN EXISTS (SELECT 1 FROM follows f WHERE f.follower_id = $2 AND f.followee_id = u.id)
                THEN TRUE
            ELSE FALSE END)                                                                              AS following
FROM articles a
         JOIN users u ON a.author_id = u.id
         LEFT JOIN article_tags at ON a.id = at.article_id
         LEFT JOIN tags t ON at.tag_id = t.id
WHERE a.slug = $1
GROUP BY a.id, u.id
`

type GetArticleParams struct {
	Slug   string      `json:"slug"`
	UserID pgtype.Int8 `json:"userId"`
}

type GetArticleRow struct {
	Slug           string           `json:"slug"`
	Title          string           `json:"title"`
	Description    string           `json:"description"`
	Body           string           `json:"body"`
	CreatedAt      pgtype.Timestamp `json:"createdAt"`
	UpdatedAt      pgtype.Timestamp `json:"updatedAt"`
	FavoritesCount int32            `json:"favoritesCount"`
	Username       string           `json:"username"`
	Bio            pgtype.Text      `json:"bio"`
	Image          pgtype.Text      `json:"image"`
	TagList        interface{}      `json:"tagList"`
	Favorited      bool             `json:"favorited"`
	Following      bool             `json:"following"`
}

// article.sql
func (q *Queries) GetArticle(ctx context.Context, arg *GetArticleParams) (GetArticleRow, error) {
	row := q.db.QueryRow(ctx, getArticle, arg.Slug, arg.UserID)
	var i GetArticleRow
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.TagList,
		&i.Favorited,
		&i.Following,
	)
	return i, err
}

const getTags = `-- name: GetTags :many
SELECT tag
FROM tags
`

func (q *Queries) GetTags(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticles = `-- name: ListArticles :many
SELECT a.slug,
       a.title,
       a.description,
       a.body,
       a.created_at                                    AS "createdAt",
       a.updated_at                                    AS "updatedAt",
       COALESCE(f.favorites_count, 0)                  AS "favoritesCount",
       u.username                                      AS "authorUsername",
       u.bio                                           AS "authorBio",
       u.image                                         AS "authorImage",
       COALESCE(fav.user_id IS NOT NULL, FALSE)        AS "favorited",
       ARRAY_AGG(t.tag ORDER BY t.tag)                 AS "tagList",
       COALESCE(follow.follower_id IS NOT NULL, FALSE) AS "following"
FROM articles a
         JOIN users u ON a.author_id = u.id
         LEFT JOIN article_tags at ON a.id = at.article_id
         LEFT JOIN tags t ON at.tag_id = t.id
         LEFT JOIN (SELECT article_id, COUNT(*) AS favorites_count FROM favorites GROUP BY article_id) f ON a.id = f.article_id
         LEFT JOIN favorites fav ON a.id = fav.article_id AND fav.user_id = $1::BIGINT
         LEFT JOIN follows follow ON u.id = follow.followee_id AND follow.follower_id = $1::BIGINT
GROUP BY a.id, u.id, f.favorites_count, fav.user_id, follow.follower_id
HAVING ($2::TEXT IS NULL OR $2::TEXT = ANY (ARRAY_AGG(t.tag)::TEXT[]))
   AND ($3::TEXT IS NULL OR u.username = $3::TEXT)
   AND ($4::TEXT IS NULL OR a.id IN (SELECT article_id
                                                            FROM favorites
                                                            WHERE user_id = (SELECT id
                                                                             FROM users
                                                                             WHERE username = $4::TEXT)))
ORDER BY a.created_at DESC
LIMIT $6::INT OFFSET $5::INT
`

type ListArticlesParams struct {
	UserID      pgtype.Int8 `json:"userId"`
	Tag         pgtype.Text `json:"tag"`
	Author      pgtype.Text `json:"author"`
	FavoritedBy pgtype.Text `json:"favoritedBy"`
	Offsett     int32       `json:"offsett"`
	Limitt      int32       `json:"limitt"`
}

type ListArticlesRow struct {
	Slug           string           `json:"slug"`
	Title          string           `json:"title"`
	Description    string           `json:"description"`
	Body           string           `json:"body"`
	CreatedAt      pgtype.Timestamp `json:"createdAt"`
	UpdatedAt      pgtype.Timestamp `json:"updatedAt"`
	FavoritesCount int64            `json:"favoritesCount"`
	AuthorUsername string           `json:"authorUsername"`
	AuthorBio      pgtype.Text      `json:"authorBio"`
	AuthorImage    pgtype.Text      `json:"authorImage"`
	Favorited      interface{}      `json:"favorited"`
	TagList        interface{}      `json:"tagList"`
	Following      interface{}      `json:"following"`
}

func (q *Queries) ListArticles(ctx context.Context, arg *ListArticlesParams) ([]ListArticlesRow, error) {
	rows, err := q.db.Query(ctx, listArticles,
		arg.UserID,
		arg.Tag,
		arg.Author,
		arg.FavoritedBy,
		arg.Offsett,
		arg.Limitt,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListArticlesRow{}
	for rows.Next() {
		var i ListArticlesRow
		if err := rows.Scan(
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FavoritesCount,
			&i.AuthorUsername,
			&i.AuthorBio,
			&i.AuthorImage,
			&i.Favorited,
			&i.TagList,
			&i.Following,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfavoriteArticle = `-- name: UnfavoriteArticle :one
WITH article_id_cte AS (SELECT a.id, a.author_id
                        FROM articles a
                        WHERE a.slug = $1),
     delete_favorite AS (
         DELETE FROM favorites
             WHERE user_id = $2 AND article_id = (SELECT id FROM article_id_cte)
             RETURNING article_id),
     update_article AS (
         UPDATE articles
             SET favorites_count = GREATEST(favorites_count - 1, 0)
             WHERE id = (SELECT article_id FROM delete_favorite)
             RETURNING id, slug, title, description, body, created_at, updated_at, favorites_count, author_id),
     taglist_cte AS (SELECT at.article_id, array_agg(t.tag) AS taglist
                     FROM article_tags at
                              JOIN tags t ON at.tag_id = t.id
                     WHERE at.article_id = (SELECT id FROM update_article)
                     GROUP BY at.article_id)
SELECT ua.slug,
       ua.title,
       ua.description,
       ua.body,
       to_char(ua.created_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ') AS created_at,
       to_char(ua.updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ') AS updated_at,
       ua.favorites_count,
       u.username,
       u.bio,
       u.image,
       EXISTS (SELECT 1
               FROM follows f
               WHERE f.follower_id = $2
                 AND f.followee_id = ua.author_id)           AS following,
       COALESCE(tl.taglist, '{}')                            AS taglist
FROM update_article ua
         JOIN
     users u ON ua.author_id = u.id
         LEFT JOIN
     taglist_cte tl ON ua.id = tl.article_id
`

type UnfavoriteArticleParams struct {
	Slug       string `json:"slug"`
	FollowerID int64  `json:"followerId"`
}

type UnfavoriteArticleRow struct {
	Slug           string      `json:"slug"`
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Body           string      `json:"body"`
	CreatedAt      string      `json:"createdAt"`
	UpdatedAt      string      `json:"updatedAt"`
	FavoritesCount int32       `json:"favoritesCount"`
	Username       string      `json:"username"`
	Bio            pgtype.Text `json:"bio"`
	Image          pgtype.Text `json:"image"`
	Following      bool        `json:"following"`
	Taglist        interface{} `json:"taglist"`
}

func (q *Queries) UnfavoriteArticle(ctx context.Context, arg *UnfavoriteArticleParams) (UnfavoriteArticleRow, error) {
	row := q.db.QueryRow(ctx, unfavoriteArticle, arg.Slug, arg.FollowerID)
	var i UnfavoriteArticleRow
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Following,
		&i.Taglist,
	)
	return i, err
}

const updateArticle = `-- name: UpdateArticle :one
WITH updated_article AS (
    UPDATE articles
        SET slug = CASE WHEN $3::text IS NOT NULL AND $4::text <> '' THEN $4::text ELSE slug END,
            title = CASE WHEN $5::text IS NOT NULL AND $5::text <> '' THEN $5::text ELSE title END,
            description = CASE
                              WHEN $6::text IS NOT NULL AND $6::text <> '' THEN $6::text
                              ELSE description END,
            body = CASE WHEN $7::text IS NOT NULL AND $7::text <> '' THEN $7::text ELSE body END,
            updated_at = CURRENT_TIMESTAMP
        WHERE slug = $1 and author_id = $2
        RETURNING id, slug, title, description, body, created_at, updated_at, favorites_count, author_id)
SELECT ua.slug,
       ua.title,
       ua.description,
       ua.body,
       to_char(ua.created_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ')                                              AS created_at,
       to_char(ua.updated_at, 'YYYY-MM-DD"T"HH24:MI:SS.MSZ')                                              AS updated_at,
       ua.favorites_count                                                                                 AS favorites_count,
       u.username,
       u.bio,
       u.image,
       (CASE WHEN EXISTS (SELECT 1 FROM favorites f WHERE f.article_id = ua.id) THEN TRUE ELSE FALSE END) AS favorited,
       ARRAY_AGG(t.tag)                                                                                   AS tagList
FROM updated_article ua
         JOIN
     users u ON ua.author_id = u.id
         LEFT JOIN
     article_tags at ON ua.id = at.article_id
         LEFT JOIN
     tags t ON at.tag_id = t.id
GROUP BY ua.id, ua.slug, ua.title, ua.description, ua.body, ua.created_at, ua.updated_at, ua.favorites_count, u.id, u.username, u.bio, u.image
`

type UpdateArticleParams struct {
	Slug        string      `json:"slug"`
	AuthorID    pgtype.Int8 `json:"authorId"`
	Newslug     string      `json:"newslug"`
	Slug_2      string      `json:"slug2"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	Body        string      `json:"body"`
}

type UpdateArticleRow struct {
	Slug           string      `json:"slug"`
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Body           string      `json:"body"`
	CreatedAt      string      `json:"createdAt"`
	UpdatedAt      string      `json:"updatedAt"`
	FavoritesCount int32       `json:"favoritesCount"`
	Username       string      `json:"username"`
	Bio            pgtype.Text `json:"bio"`
	Image          pgtype.Text `json:"image"`
	Favorited      bool        `json:"favorited"`
	Taglist        interface{} `json:"taglist"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg *UpdateArticleParams) (UpdateArticleRow, error) {
	row := q.db.QueryRow(ctx, updateArticle,
		arg.Slug,
		arg.AuthorID,
		arg.Newslug,
		arg.Slug_2,
		arg.Title,
		arg.Description,
		arg.Body,
	)
	var i UpdateArticleRow
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.Username,
		&i.Bio,
		&i.Image,
		&i.Favorited,
		&i.Taglist,
	)
	return i, err
}
